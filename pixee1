import re
import pandas as pd
from pathlib import Path

# File paths
COUNT_XLSX = Path("Count.xlsx")
SLA_XLSX = Path("sla.xlsx")
SLA_SHEET = "Daily_Monitoring_Apps"
OUTPUT_SLA = Path("sla_with_not_set.xlsx")

def normalize_project_from_filename(fname):
    """Remove _JAR/_Js suffixes and extensions, normalize project name."""
    if pd.isna(fname):
        return ""
    s = str(fname).strip()
    s = Path(s).stem  # drop extension
    s = re.sub(r'(?i)(?:[_\-\.]?(?:jar|js))+$', '', s)  # remove _JAR/_Js
    return s.strip("_-. ")

# ---- Read Count.xlsx ----
df_count = pd.read_excel(COUNT_XLSX, engine="openpyxl")

# Find needed columns
filename_col = [c for c in df_count.columns if "file" in c.lower()][0]
analysis_col = [c for c in df_count.columns if "analysis" in c.lower() or "state" in c.lower()][0]

# Derive project name from filename
df_count["Project"] = df_count[filename_col].apply(normalize_project_from_filename)

# Filter NOT_SET
df_count["analysis_state_norm"] = df_count[analysis_col].astype(str).str.strip().str.upper()
df_notset = df_count[df_count["analysis_state_norm"] == "NOT_SET"]

# Count by project
counts = df_notset.groupby("Project").size().to_dict()

# ---- Read SLA.xlsx (only project column A) ----
df_sla = pd.read_excel(SLA_XLSX, sheet_name=SLA_SHEET, engine="openpyxl", usecols=[0])
df_sla.columns = ["Project"]

# Map counts to SLA projects
df_sla["NOT_SET"] = df_sla["Project"].apply(
    lambda p: counts.get(str(p).strip(), 0)
)

# ---- Save result ----
df_sla.to_excel(OUTPUT_SLA, sheet_name=SLA_SHEET, index=False)

print(f"âœ… Done. Output saved to {OUTPUT_SLA}")