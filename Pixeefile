#!/usr/bin/env python3
"""
Update Jira statuses into column B of jira.xlsx (first sheet).

- Column A: Jira issue keys (e.g., ABC-123)
- Column B: Will be overwritten with the current Status name for each key
- Preserves the rest of the workbook (uses openpyxl to edit only col B)

Auth:
- If you're on Jira Cloud, set EMAIL to your Atlassian account email and TOKEN to your API token.
  The script will use HTTP Basic Auth (email + token).
- If you're on Jira Data Center/Server with a Personal Access Token (PAT), leave EMAIL=None.
  The script will use Bearer <TOKEN>.

Edit BASE_URL, TOKEN, EMAIL below before running.
"""

import sys
import time
from typing import Optional

import requests
from requests.adapters import HTTPAdapter
from requests.auth import HTTPBasicAuth
from urllib3.util.retry import Retry
from openpyxl import load_workbook

# ================== CONFIG: EDIT THESE ==================
BASE_URL = "https://jiira.xrm.com"     # <- normalized from your "Https;//jiira.xrm.com"
TOKEN    = "sjiejdjdjdudjd"            # <- your token
EMAIL    = None                        # <- set to your email for Jira Cloud, or leave None for Bearer token
SHEET_NAME = None                      # <- None = first worksheet; or put exact sheet name
# ========================================================

def normalize_base(url: str) -> str:
    url = url.strip()
    url = url.replace(";", ":")  # fixes "Https;//" typo
    if not url.startswith("http"):
        url = "https://" + url
    return url.rstrip("/")

def make_session() -> requests.Session:
    s = requests.Session()
    retries = Retry(
        total=5,
        backoff_factor=1.0,
        status_forcelist=[429, 500, 502, 503, 504],
        allowed_methods=["GET", "HEAD", "OPTIONS"]
    )
    s.mount("https://", HTTPAdapter(max_retries=retries))
    s.mount("http://", HTTPAdapter(max_retries=retries))
    s.headers.update({"Accept": "application/json"})
    if EMAIL:
        # Jira Cloud (Basic auth: email + API token)
        s.auth = HTTPBasicAuth(EMAIL, TOKEN)
    else:
        # Jira DC/Server with PAT (Bearer)
        s.headers.update({"Authorization": f"Bearer {TOKEN}"})
    return s

def get_status(session: requests.Session, base: str, issue_key: str) -> str:
    """
    Tries Jira v3 endpoint first (Cloud), falls back to v2 (Server/DC).
    Returns a human-readable status string or an error marker.
    """
    issue_key = issue_key.strip()
    if not issue_key:
        return ""

    params = {"fields": "status"}
    endpoints = [
        f"{base}/rest/api/3/issue/{issue_key}",
        f"{base}/rest/api/2/issue/{issue_key}",
    ]

    for url in endpoints:
        try:
            r = session.get(url, params=params, timeout=20)
        except requests.RequestException as e:
            return f"ERROR: {e.__class__.__name__}"

        if r.status_code == 404:
            return "NOT FOUND"
        if r.status_code == 401 or r.status_code == 403:
            return f"AUTH ERROR ({r.status_code})"
        if 200 <= r.status_code < 300:
            try:
                data = r.json()
                status_name = (
                    data.get("fields", {})
                        .get("status", {})
                        .get("name")
                )
                return status_name or "UNKNOWN"
            except Exception:
                return "PARSE ERROR"

    return f"HTTP {r.status_code}"

def main():
    base = normalize_base(BASE_URL)
    session = make_session()

    # Load workbook and sheet
    try:
        wb = load_workbook("jira.xlsx")
    except FileNotFoundError:
        print("ERROR: Could not find 'jira.xlsx' in the current directory.", file=sys.stderr)
        sys.exit(1)

    ws = wb[SHEET_NAME] if SHEET_NAME and SHEET_NAME in wb.sheetnames else wb.worksheets[0]

    # Optional: set header for column B if first row likely contains headers
    # If you know row 1 is headers, uncomment next line:
    # ws["B1"] = "Status"

    # Iterate rows: from row 2 if header; else from row 1. Weâ€™ll auto-detect:
    start_row = 2 if (ws["A1"].value and isinstance(ws["A1"].value, str) and ws["A1"].value.strip().lower() in {"key", "issue", "jira", "issue key"}) else 1

    updated = 0
    for row in range(start_row, ws.max_row + 1):
        key_cell = ws.cell(row=row, column=1)
        status_cell = ws.cell(row=row, column=2)

        issue_key = (key_cell.value or "")
        if not str(issue_key).strip():
            # skip empty key rows
            continue

        status = get_status(session, base, str(issue_key))
        status_cell.value = status
        updated += 1

        # Be polite to the API if you have many issues (adjust/slower if needed)
        time.sleep(0.05)

    wb.save("jira.xlsx")
    print(f"Done. Updated statuses for {updated} issues into column B of 'jira.xlsx'.")

if __name__ == "__main__":
    main()