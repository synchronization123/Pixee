#!/usr/bin/env python3
"""
Reads Jira keys from column A of jira.xlsx (first sheet) and writes Status into column B.
Forces Jira Server/DC endpoint: /rest/api/2
Auth: Bearer <TOKEN> (Personal Access Token). If you actually need Basic, see comment below.
"""

import sys, time, requests
from openpyxl import load_workbook

# ---------- CONFIG ----------
BASE_URL = "https://jiira.xrm.com"   # your host (typo fixed below)
TOKEN    = "sjiejdjdjdudjd"          # your PAT
SHEET_NAME = None                    # None = first worksheet
ADD_STATUS_HEADER = False            # set True if row 1 is headers and you want "Status" in B1
VERIFY_SSL = True                    # set False only if your Jira uses self-signed certs
# If you need Basic auth instead of PAT:
# BASIC_USER = "your-username"; BASIC_PASS = "your-password"
# ----------------------------

def normalize_base(url: str) -> str:
    url = (url or "").strip().replace(";", ":")
    if not url.startswith("http"):
        url = "https://" + url
    return url.rstrip("/")

def candidate_bases(url: str):
    base = normalize_base(url)
    bases = [base]
    if "://jiira." in base:  # auto-correct common typo
        bases.append(base.replace("://jiira.", "://jira."))
    return bases

def get_status(session: requests.Session, base: str, issue_key: str) -> str:
    url = f"{base}/rest/api/2/issue/{issue_key}"
    try:
        r = session.get(url, params={"fields":"status"}, timeout=20, verify=VERIFY_SSL)
    except requests.RequestException as e:
        return f"ERROR: {e.__class__.__name__}"

    # Non-200 handling
    if r.status_code == 404:
        return "NOT FOUND"
    if r.status_code in (401, 403):
        return f"AUTH ERROR ({r.status_code})"
    if not (200 <= r.status_code < 300):
        return f"HTTP {r.status_code}"

    # Content-type guard (avoid HTML login pages)
    ctype = (r.headers.get("Content-Type") or "").split(";")[0].strip().lower()
    if ctype != "application/json":
        snippet = (r.text or "")[:160].lower()
        if any(t in snippet for t in ["login", "log in", "atlassian", "sso", "csrf"]):
            return "AUTH/SSO HTML"
        return f"NON-JSON ({ctype or 'unknown'})"

    try:
        data = r.json()
    except Exception:
        return "PARSE ERROR"

    # Jira error payloads
    if isinstance(data, dict) and ("errorMessages" in data or "errors" in data):
        msgs = []
        if isinstance(data.get("errorMessages"), list):
            msgs += data["errorMessages"]
        if isinstance(data.get("errors"), dict):
            msgs += [f"{k}: {v}" for k,v in data["errors"].items()]
        return "JIRA ERROR: " + "; ".join(msgs) if msgs else "JIRA ERROR"

    return (data.get("fields", {}).get("status", {}).get("name")) or "UNKNOWN"

def main():
    bases = candidate_bases(BASE_URL)

    # --- session using PAT (Bearer) ---
    s = requests.Session()
    s.headers.update({
        "Accept": "application/json",
        "Authorization": f"Bearer {TOKEN}",
    })
    # If you need Basic instead of PAT, comment the line above and use:
    # s.auth = (BASIC_USER, BASIC_PASS)

    try:
        wb = load_workbook("jira.xlsx")
    except FileNotFoundError:
        print("ERROR: 'jira.xlsx' not found.", file=sys.stderr)
        sys.exit(1)

    ws = wb[SHEET_NAME] if SHEET_NAME and SHEET_NAME in wb.sheetnames else wb.worksheets[0]

    # header detection
    has_header = isinstance(ws["A1"].value, str) and ws["A1"].value.strip().lower() in {"key","issue","jira","issue key"}
    if ADD_STATUS_HEADER and has_header:
        ws["B1"] = "Status"
    start_row = 2 if has_header else 1

    updated = 0
    for row in range(start_row, ws.max_row + 1):
        key = ws.cell(row=row, column=1).value
        if not key:
            continue
        key = str(key).strip()
        if not key:
            continue

        # try corrected host first if applicable
        status = None
        for base in bases:
            status = get_status(s, base, key)
            # stop early on a clear outcome
            if status not in {"NON-JSON (unknown)", "PARSE ERROR"}:
                break

        ws.cell(row=row, column=2).value = status
        updated += 1
        time.sleep(0.05)

    wb.save("jira.xlsx")
    print(f"Done. Updated {updated} rows (column B) using /rest/api/2.")

if __name__ == "__main__":
    main()