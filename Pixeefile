import os
import pandas as pd
import requests
import base64
import json
from flask import Flask, render_template, request, jsonify

app = Flask(__name__)

# Load config from env vars
BITBUCKET_API_BASE = os.getenv("BITBUCKET_API_BASE", "https://bitbucket.crm.com/rest/api/latest")
USERNAME = os.getenv("BITBUCKET_USERNAME")
PASSWORD = os.getenv("BITBUCKET_PASSWORD")
EXCEL_FILE = "repos.xlsx"
FILES_LIMIT = 100

if not USERNAME or not PASSWORD:
    raise ValueError("BITBUCKET_USERNAME and BITBUCKET_PASSWORD must be set in environment variables.")

# Encode credentials for Basic Authentication
credentials = f"{USERNAME}:{PASSWORD}"
auth_header = f"Basic {base64.b64encode(credentials.encode()).decode()}"

headers = {
    "Authorization": auth_header,
    "Accept": "application/json"
}

def get_latest_tag(project_key, repo_slug):
    """Get the latest tag ID from the repository's tags endpoint."""
    try:
        url = f"{BITBUCKET_API_BASE}/projects/{project_key}/repos/{repo_slug}/tags?orderBy=NAME_DESC&limit=1"
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            try:
                data = response.json()
                if not isinstance(data, dict):
                    return None
                values = data.get("values", [])
                if not values:
                    return None
                latest_tag = values[0].get("id")  # e.g., "refs/tags/v1.4.4"
                return latest_tag
            except json.JSONDecodeError:
                return None
        return None
    except requests.exceptions.RequestException:
        return None

def get_file_content(project_key, repo_slug, file_path, ref):
    """Get raw content of a specific file at the given ref (tag or branch)."""
    try:
        url = f"{BITBUCKET_API_BASE}/projects/{project_key}/repos/{repo_slug}/raw/{file_path}?at={ref}"
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            return response.text
        return None
    except requests.exceptions.RequestException:
        return None

def search_file_content(project_key, repo_slug, keyword, ref):
    """Search for keyword in file contents at the given ref."""
    try:
        url = f"{BITBUCKET_API_BASE}/projects/{project_key}/repos/{repo_slug}/files?limit={FILES_LIMIT}"
        if ref:
            url += f"&at={ref}"
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            try:
                data = response.json()
                if not isinstance(data, dict):
                    return []
                values = data.get("values", [])
                matches = []
                for file_path in values:
                    if not isinstance(file_path, str):
                        continue
                    content = get_file_content(project_key, repo_slug, file_path, ref or 'default')
                    if content and keyword.lower() in content.lower():
                        # Extract matching lines for preview
                        lines = [line for line in content.split('\n') if keyword.lower() in line.lower()]
                        matches.append({
                            "file_path": file_path,
                            "matching_lines": lines[:5]  # Limit to first 5 lines
                        })
                return matches
            except json.JSONDecodeError:
                return []
        return []
    except requests.exceptions.RequestException:
        return []

@app.route('/', methods=['GET', 'POST'])
def index():
    keyword = ""
    results = []
    if request.method == 'POST':
        keyword = request.form.get('keyword', '').strip()
        if keyword:
            # Load repos from Excel
            df = pd.read_excel(EXCEL_FILE)
            if 'PROJECT' in df.columns and 'REPO' in df.columns:
                for _, row in df.iterrows():
                    project_key = row["PROJECT"]
                    repo_slug = row["REPO"]
                    if pd.isna(project_key) or pd.isna(repo_slug):
                        continue
                    latest_tag = get_latest_tag(project_key, repo_slug)
                    ref = latest_tag if latest_tag else None
                    matches = search_file_content(project_key, repo_slug, keyword, ref)
                    if matches:
                        results.append({
                            "project": project_key,
                            "repo": repo_slug,
                            "tag": latest_tag or "default branch",
                            "matches": matches
                        })
    return render_template('index.html', keyword=keyword, results=results)

if __name__ == '__main__':
    app.run(debug=True)






<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bitbucket Content Search</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Bitbucket Repository Search</h1>
        <form method="POST" class="search-form">
            <input type="text" name="keyword" placeholder="Enter keyword to search in file contents..." value="{{ keyword }}" required>
            <button type="submit">Search</button>
        </form>
        
        {% if keyword %}
        <div class="results-header">
            <h2>Search Results for "{{ keyword }}" ({{ results|length }} repositories found)</h2>
        </div>
        
        {% if results %}
        <div class="results">
            {% for result in results %}
            <div class="repo-result">
                <h3>Repository: {{ result.project }} / {{ result.repo }} (Tag: {{ result.tag }})</h3>
                <ul class="file-matches">
                    {% for match in result.matches %}
                    <li class="file-match">
                        <strong>File: {{ match.file_path }}</strong>
                        <div class="preview">
                            <h4>Matching Lines (Preview):</h4>
                            <ul>
                                {% for line in match.matching_lines %}
                                <li>"{{ line }}"</li>
                                {% endfor %}
                            </ul>
                        </div>
                    </li>
                    {% endfor %}
                </ul>
            </div>
            {% endfor %}
        </div>
        {% else %}
        <p class="no-results">No matches found for "{{ keyword }}". Try a different keyword!</p>
        {% endif %}
        {% endif %}
    </div>
</body>
</html>
