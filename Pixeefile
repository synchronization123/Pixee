<!-- templates/index.html -->
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Daily Monitoring — Dependency-Track Dashboard</title>

  <!-- Bootstrap CSS (CDN) -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    body { padding: 1rem; }
    .table-wrap { width: 100%; overflow-x: auto; }
    .full-width { width: 100%; }
    .spinner-large { width: 3rem; height: 3rem; }
  </style>
</head>
<body>
  <div class="container-fluid">
    <div class="d-flex align-items-center justify-content-between mb-3">
      <h2 class="mb-0">Daily Monitoring Projects</h2>
      <div>
        <button id="refreshBtn" class="btn btn-primary me-2">Refresh</button>
        <select id="perPageSelect" class="form-select d-inline-block" style="width:120px;">
          <option value="5">5 / page</option>
          <option value="10" selected>10 / page</option>
          <option value="25">25 / page</option>
        </select>
      </div>
    </div>

    <div class="card mb-3">
      <div class="card-body">
        <form id="filterForm" class="row g-2 align-items-center">
          <div class="col-auto">
            <label for="tagInput" class="col-form-label">Tag</label>
          </div>
          <div class="col-auto">
            <input id="tagInput" class="form-control" value="daily monitoring">
          </div>
          <div class="col-auto">
            <button id="applyFilter" class="btn btn-outline-secondary">Apply</button>
          </div>
        </form>
      </div>
    </div>

    <div class="table-wrap">
      <table class="table table-striped table-hover full-width">
        <thead>
          <tr>
            <th>Project</th>
            <th>Tags</th>
            <th>Total Findings</th>
            <th>Blank analysis.state</th>
            <th>NOT_SET analysis.state</th>
          </tr>
        </thead>
        <tbody id="projectsBody">
          <!-- rows inserted here -->
        </tbody>
      </table>
    </div>

    <nav>
      <ul class="pagination" id="paginationControls"></ul>
    </nav>
  </div>

  <!-- Loading modal with countdown -->
  <div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content text-center">
        <div class="modal-body">
          <div class="d-flex flex-column align-items-center">
            <div class="spinner-border spinner-large mb-3" role="status"></div>
            <div id="loadingText" class="h5">Fetching latest data...</div>
            <div class="small text-muted mt-2">Time remaining: <span id="countdown">10</span>s</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap + JS (CDN) -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    const projectsBody = document.getElementById("projectsBody");
    const paginationControls = document.getElementById("paginationControls");
    const refreshBtn = document.getElementById("refreshBtn");
    const tagInput = document.getElementById("tagInput");
    const perPageSelect = document.getElementById("perPageSelect");
    const applyFilter = document.getElementById("applyFilter");

    let currentPage = 1;
    let perPage = parseInt(perPageSelect.value || "10", 10);

    // Modal management
    const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'), {});
    const countdownEl = document.getElementById('countdown');
    let countdownTimer = null;

    function startCountdown(seconds) {
      let remaining = seconds;
      countdownEl.textContent = remaining;
      clearInterval(countdownTimer);
      countdownTimer = setInterval(() => {
        remaining -= 1;
        countdownEl.textContent = remaining;
        if (remaining <= 0) {
          clearInterval(countdownTimer);
        }
      }, 1000);
    }

    function stopCountdown() {
      clearInterval(countdownTimer);
    }

    async function fetchAndRender(page = 1, showModal = false) {
      currentPage = page;
      perPage = parseInt(perPageSelect.value || "10", 10);
      const tag = tagInput.value.trim() || "daily monitoring";
      const url = `/api/projects?page=${page}&per_page=${perPage}&tag=${encodeURIComponent(tag)}`;

      if (showModal) {
        startCountdown(15);          // default countdown time (secs)
        loadingModal.show();
      }

      try {
        const resp = await fetch(url);
        const data = await resp.json();
        renderTable(data.projects);
        renderPagination(data.page, data.per_page, data.total);
      } catch (err) {
        console.error("Failed to fetch data:", err);
        alert("Failed to fetch data. See console for details.");
      } finally {
        stopCountdown();
        loadingModal.hide();
      }
    }

    function renderTable(rows) {
      projectsBody.innerHTML = "";
      if (!rows || rows.length === 0) {
        projectsBody.innerHTML = `<tr><td colspan="5" class="text-center">No projects on this page.</td></tr>`;
        return;
      }
      for (const r of rows) {
        const tags = Array.isArray(r.tags) ? r.tags.map(t => typeof t === 'object' ? (t.name || JSON.stringify(t)) : t).join(", ") : "";
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td>${escapeHtml(r.name || r.uuid || "")}</td>
          <td>${escapeHtml(tags)}</td>
          <td>${r.total_findings ?? 0}</td>
          <td>${r.blank_count ?? 0}</td>
          <td>${r.not_set_count ?? 0}</td>
        `;
        projectsBody.appendChild(tr);
      }
    }

    function renderPagination(page, per_page, total) {
      paginationControls.innerHTML = "";
      const totalPages = Math.max(1, Math.ceil(total / per_page));
      const createLi = (label, p, disabled=false, active=false) => {
        const li = document.createElement("li");
        li.className = "page-item" + (disabled ? " disabled" : "") + (active ? " active" : "");
        const a = document.createElement("a");
        a.className = "page-link";
        a.href = "#";
        a.textContent = label;
        a.onclick = (e) => { e.preventDefault(); if (!disabled) fetchAndRender(p, true); };
        li.appendChild(a);
        return li;
      };

      paginationControls.appendChild(createLi("« Prev", Math.max(1, page-1), page<=1));
      // show up to 7 page links centered on current page
      const windowSize = 7;
      let start = Math.max(1, page - Math.floor(windowSize/2));
      let end = Math.min(totalPages, start + windowSize - 1);
      if (end - start < windowSize - 1) {
        start = Math.max(1, end - windowSize + 1);
      }
      for (let p = start; p <= end; p++) {
        paginationControls.appendChild(createLi(p, p, false, p === page));
      }
      paginationControls.appendChild(createLi("Next »", Math.min(totalPages, page+1), page >= totalPages));
    }

    // sanitize function to avoid XSS in table output
    function escapeHtml(unsafe) {
      if (unsafe === null || unsafe === undefined) return "";
      return String(unsafe)
        .replaceAll("&", "&amp;")
        .replaceAll("<", "&lt;")
        .replaceAll(">", "&gt;")
        .replaceAll('"', "&quot;")
        .replaceAll("'", "&#039;");
    }

    // Button handlers
    refreshBtn.addEventListener("click", () => fetchAndRender(1, true));
    perPageSelect.addEventListener("change", () => fetchAndRender(1, true));
    applyFilter.addEventListener("click", (ev) => { ev.preventDefault(); fetchAndRender(1, true); });

    // initial load
    fetchAndRender(1, false);
  </script>
</body>
</html>