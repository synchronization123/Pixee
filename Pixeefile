privilege escalation: web enable feature (intended for patients) allows unauthorized staff/admin account takeover via client-side manipulation


---

Description:

A critical access control and logic flaw exists in the application’s web enable functionality.
This feature is intended exclusively for patients, but any logged-in internal user can exploit it to modify and reset credentials for staff, admin, or provider accounts.

By using browser Developer Tools to re-enable disabled UI fields (email and username) and triggering the web enable action, the attacker can update another user’s email and username — resulting in password reset and, in some cases, full account takeover.
This violates both authorization boundaries and intended functional scope of the web enable feature.


---

Scenario 1: 2FA not enabled

Case 1 – Email field pre-filled

1. Log in as a regular user (non-patient role).


2. Navigate to the screen where the DVA / web enable feature is available.


3. Observe that the email field and web enable button are disabled.


4. Open Developer Tools → Elements tab.


5. Remove the disabled and block attributes from both the textbox and the button.


6. Modify the email/username fields with attacker-controlled values.


7. Click web enable.


8. The system updates both email and username to the new values and resets the password automatically.



Result:

Target account’s credentials are changed without authorization.

Legitimate staff/admin users can no longer log in (denial of service).

If performed repeatedly, all staff accounts could be disabled — impacting application availability.



---

Case 2 – Email field blank

1. If the target user has no email value, the field appears blank.


2. Remove the disabled attribute in Developer Tools.


3. Enter any desired email/username and click web enable.


4. The entered values overwrite legitimate credentials, and the password resets automatically.




---

Scenario 2: 2FA enabled and email verified

1. Log in as a regular user with 2FA enabled and verified email.


2. Remove the disabled attributes for the textbox and button using Developer Tools.


3. Enter an attacker-controlled email address and click web enable.


4. The attacker’s email replaces the legitimate, verified email for the target user.


5. Using Forgot Password, the attacker requests an OTP — which is now delivered to the attacker’s email.


6. The attacker resets the password and gains full control over the staff/admin account.




---

Expected Result

The web enable feature should be accessible only for patients.

Any attempt by staff or non-patient roles to trigger this functionality must be rejected at the server level.

Server-side authorization should prevent unauthorized email/username changes.

2FA, OTP, and password reset flows must remain bound to the legitimate, verified email of the original account owner.



---

Actual Result

The web enable operation can be triggered by any logged-in user.

UI restrictions are enforced only on the frontend, and can be bypassed through Developer Tools.

The backend does not validate that the operation is restricted to patient entities.

Unauthorized updates occur, resulting in account lockouts or takeovers of staff and admin accounts.



---

Impact

Critical: Privilege escalation, account takeover, and mass denial-of-service.

Allows an internal user to:

Modify staff/admin credentials.

Lock out all legitimate users.

Bypass 2FA by redirecting OTPs to their own email.


Causes loss of confidentiality, integrity, and availability of the entire EMR environment.

Direct violation of the functional boundary (patient-only feature misused for staff-level control).



---

Severity:

Critical

CVSS v4.0 Vector (Suggested):

CVSS:4.0/AV:N/AC:L/PR:L/UI:N/VC:H/VI:H/VA:H/SC:N/SI:N/SA:N


---

Remediation Recommendations:

1. Enforce strict role-based access control (RBAC):

Limit the web enable feature strictly to patient roles.

Reject any invocation of this feature from non-patient accounts at the backend.



2. Implement server-side authorization checks:

Validate that the logged-in user has the right to perform the requested operation.

Ensure the target ID belongs to a patient entity, not a staff, provider, or admin.



3. Remove client-side-only restrictions:

UI elements marked “disabled” must also be validated on the server.

Never rely on the frontend to enforce access control.



4. Protect credential update flows:

Disallow updating usernames or emails through patient-facing endpoints.

Enforce admin-only privilege for credential or account enablement operations.



5. Secure OTP and password reset mechanisms:

OTPs must always go to the original, verified email address.

Require multi-step verification for sensitive updates (e.g., reauthentication or secondary factor).



6. Enhance audit logging and alerting:

Log all “web enable” actions with role, user ID, IP address, and target account details.

Trigger alerts if staff/admin accounts are modified using patient workflows.



7. Perform regression and penetration testing:

Test the fix to confirm that no non-patient user can access or trigger web enable actions